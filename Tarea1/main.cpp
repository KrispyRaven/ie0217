/**
 * @file main.cpp
 * @author Noel Blandon
 * @date 12/09/2023
 * @brief Almacena el vector con preguntas y definiciones, ademas ejecuta la funcion principal
*/
#include "function.hpp"
#include <iostream>
#include <string>
#include <vector>

using namespace std;

largaDefinicion q1(1,"Cual es la principal diferencia entre C y C++?","Respuesta corta: La principal diferencia es que C++ es una extensión de C que agrega características orientadas a objetos, como clases y herencia.","Respuesta intermedia: La principal diferencia radica en que C++ es una extensión de C que incluye todas las características de C, pero ademas agrega características de programación orientada a objetos, como clases, herencia, polimorfismo y sobrecarga de operadores, lo que lo hace mas versatil y adecuado para desarrollar aplicaciones complejas y reutilizables.");
largaDefinicion q2(2,"Cual es la diferencia entre un interprete y un compilador?","Respuesta corta: Un compilador traduce código fuente a código de maquina antes de la ejecución, mientras que un interprete ejecuta el código directamente línea por línea.","Respuesta intermedia: Un compilador es una herramienta que traduce todo el programa escrito en un lenguaje de alto nivel a código de maquina antes de su ejecución, generando un archivo ejecutable. Un interprete, por otro lado, ejecuta el código fuente línea por línea, traduciendolo y ejecutandolo al mismo tiempo, sin generar un archivo ejecutable separado.");
largaDefinicion q3(3,"Que es el namespace y para que se utiliza?","Respuesta corta: Un namespace es un mecanismo en lenguajes de programación como C++ que permite agrupar identificadores (como variables y funciones) en un contexto específico para evitar colisiones de nombres.","Respuesta intermedia: Un namespace es un concepto en programación que permite agrupar identificadores (como variables, funciones y clases) en un contexto o espacio de nombres específico. Se utiliza para evitar conflictos de nombres entre diferentes partes de un programa, especialmente cuando se trabaja con bibliotecas o módulos que pueden tener identificadores con nombres similares. Los namespaces proporcionan una forma de organizar y estructurar código de manera mas clara y segura, ya que cada identificador se asocia con un namespace particular.");
largaDefinicion q4(4,"Cual es la diferencia entre declarar e inicializar una variable?","Respuesta corta: Declarar una variable significa definir su tipo y nombre, pero no le asigna un valor inicial. Inicializar una variable significa asignarle un valor en el momento de la declaración.","Respuesta intermedia: Declarar una variable es especificar su tipo y nombre en el código, lo que permite al compilador reservar memoria para ella. La variable declarada no tiene un valor inicial definido en este punto. Inicializar una variable, por otro lado, significa asignarle un valor específico en el momento de la declaración, lo que establece su contenido inicial. ");
largaDefinicion q5(5,"Cual es la diferencia entre un break y un continue en los bucles de C++?","Respuesta corta: break se utiliza para salir inmediatamente de un bucle, mientras que continue se usa para omitir la iteración actual y continuar con la siguiente en un bucle.","Respuesta intermedia: break se utiliza en bucles para salir de ellos inmediatamente, interrumpiendo la ejecución del bucle y continuando con el código despues del bucle. Por otro lado, continue se usa para omitir la iteración actual de un bucle y pasar a la siguiente, sin salir completamente del bucle.");
largaDefinicion q6(6,"Que es el polimorfismo en clases?","Respuesta corta: El polimorfismo en clases es un concepto de programación orientada a objetos que permite a objetos de diferentes clases responder de manera diferente a una misma función o metodo. Se basa en la herencia y la capacidad de una clase derivada de reemplazar o sobrescribir el comportamiento de un metodo heredado de su clase base.","Respuesta intermedia: El polimorfismo en clases es uno de los pilares de la programación orientada a objetos (POO). Permite que objetos de diferentes clases, que comparten una misma interfaz o heredan de una clase común, puedan responder de manera específica a una función o metodo comúnmente llamado, pero con implementaciones diferentes. Esto facilita la creación de código mas generico y flexible, ya que se pueden tratar objetos de diferentes clases de manera uniforme a traves de su interfaz compartida, sin necesidad de conocer los detalles específicos de cada clase.");
largaDefinicion q7(7,"Que hace la sentencia extern?","Respuesta corta: En C y C++, la sentencia extern se utiliza para declarar una variable o función que esta definida en otro archivo fuente o módulo, lo que permite que se acceda a esa variable o función desde otros archivos fuente en el proyecto.","Respuesta intermedia: La sentencia extern se utiliza en C y C++ para declarar una variable o función que se encuentra definida en otro archivo fuente (normalmente en un archivo de origen diferente) o en una biblioteca compartida. Esto permite que otras partes del programa accedan a la variable o función declarada como extern. La sentencia extern es una forma de proporcionar una \"declaración de adelanto\" para que el compilador sepa que esa variable o función existe en otro lugar y puede utilizarse en el programa actual sin necesidad de proporcionar su definición completa. Esto es útil en proyectos grandes o cuando se trabaja con múltiples archivos fuente y se necesita compartir información entre ellos.");
largaDefinicion q8(8,"Que son las palabras reservadas?","Respuesta corta: Las palabras reservadas son un conjunto de palabras clave en un lenguaje de programación que tienen un significado específico y estan reservadas para su uso en la sintaxis del lenguaje. No se pueden utilizar como nombres de variables, funciones u otros identificadores personalizados.","Respuesta intermedia: Las palabras reservadas son un conjunto de palabras clave en un lenguaje de programación que tienen un significado y un propósito específico en la sintaxis del lenguaje. Estas palabras estan reservadas para tareas específicas y no se pueden utilizar como nombres de variables, funciones u otros identificadores personalizados en el programa. Ejemplos de palabras reservadas en muchos lenguajes de programación incluyen if, else, while, for, class, int, return, entre otras. El uso adecuado de las palabras reservadas es fundamental para escribir código valido y comprensible en un lenguaje de programación.");
largaDefinicion q9(9,"Que es un puntero y cómo se utiliza? Explique con un ejemplo de la vida real.","Respuesta corta: Un puntero es una variable que almacena la dirección de memoria de otra variable. Se utiliza para acceder y manipular datos almacenados en una ubicación de memoria específica. En la vida real, puedes pensar en un puntero como una dirección postal que te permite encontrar y modificar la información en una caja de correo.","Respuesta intermedia: Un puntero es una variable que almacena la dirección de memoria de otra variable en un lenguaje de programación. En lugar de contener datos directamente, un puntero contiene la ubicación de memoria donde se encuentra la variable real. Esto permite acceder y manipular directamente los datos en esa ubicación de memoria.");
largaDefinicion q10(10,"Que es una función prototipo?","Respuesta corta: Una función prototipo es una declaración anticipada de una función en un programa de manera que el compilador conozca su firma (nombre, tipo de retorno y parametros) antes de que la función sea definida o utilizada. Ayuda al compilador a comprender cómo se llamara y usara la función en otras partes del código.","Respuesta intermedia: Una función prototipo es una declaración anticipada de una función en un programa de manera que el compilador tenga conocimiento de su firma (nombre de la función, tipo de retorno y tipos de parametros) antes de que la función sea definida o utilizada en otras partes del código. El propósito principal de un prototipo de función es informar al compilador sobre la existencia y la interfaz de la función antes de que se llame o se defina. Esto permite al compilador verificar que las llamadas a la función se realicen correctamente en terminos de tipos de datos y número de argumentos.");
largaDefinicion q11(11,"Que es un puntero nullptr?","Respuesta corta: nullptr es una palabra clave en C++ que se utiliza para representar un puntero nulo o vacío. Es una mejora sobre el uso de NULL o 0 para indicar un puntero nulo y ayuda a prevenir errores de ambigüedad en el código.","Respuesta intermedia: nullptr es una característica introducida en C++11 que se utiliza para representar explícitamente un puntero nulo o vacío. Anteriormente, se solían usar NULL o 0 para representar punteros nulos, pero esto podía causar ambigüedad en ciertos contextos. nullptr resuelve esta ambigüedad y es mas seguro de usar, ya que se comporta de manera mas consistente en diferentes situaciones.");
largaDefinicion q12(12,"Cual es la diferencia entre pasar parametros por valor, por referencia y por puntero?","Respuesta corta:Pasar parametros por valor hace una copia del valor original, sin afectar la variable original.Pasar parametros por referencia permite modificar directamente la variable original.Pasar parametros por puntero es similar a la referencia, pero se utiliza punteros para acceder y modificar la variable original.","Respuesta intermedia:Pasar parametros por valor implica que se hace una copia del valor original y se trabaja con esa copia dentro de la función. Esto no afecta la variable original fuera de la función y es eficiente para tipos de datos pequeños como enteros o caracteres.\nPasar parametros por referencia permite trabajar directamente con la variable original dentro de la función, lo que significa que cualquier cambio en el parametro tambien afectara la variable original fuera de la función. Esto es útil cuando se desea modificar el valor de la variable original dentro de la función.\nPasar parametros por puntero es similar a la referencia, pero en lugar de utilizar una referencia, se utiliza un puntero para acceder y modificar la variable original. Esto tambien permite modificar la variable original y es útil cuando se trabaja con estructuras de datos mas complejas o cuando se necesita la capacidad de apuntar a ningún objeto (usando punteros nulos).");
largaDefinicion q13(13,"Que es un memory leak?","Respuesta corta: Un memory leak (fuga de memoria) es un problema en la programación de computadoras en el que un programa reserva espacio en la memoria para datos o objetos, pero no libera adecuadamente ese espacio cuando ya no es necesario. Esto puede llevar a una perdida gradual de memoria disponible en el sistema, lo que puede hacer que el programa se vuelva mas lento o incluso falle debido a la falta de recursos.","Respuesta intermedia: Un memory leak, o fuga de memoria, es un error de programación en el que un programa asigna dinamicamente memoria (por ejemplo, usando malloc en C/C++ o new en C++) para almacenar datos u objetos, pero no libera esa memoria correctamente cuando ya no es necesaria. Como resultado, la memoria reservada no se puede utilizar nuevamente y se convierte en inaccesible, lo que lleva a una perdida gradual de la memoria disponible en el sistema. Con el tiempo, esto puede causar que el programa consuma mas y mas memoria, lo que puede hacer que el programa se vuelva mas lento o incluso falle debido a la falta de recursos. La detección y corrección de memory leaks es una parte importante de la programación, ya que puede tener un impacto significativo en el rendimiento y la estabilidad de una aplicación. Herramientas como los analizadores de memoria y las buenas practicas de programación, como liberar la memoria de manera apropiada cuando ya no es necesaria, son clave para prevenir y solucionar problemas de memory leaks.");
largaDefinicion q14(14,"Para que se utiliza la directiva #ifndef?","Respuesta corta: La directiva #ifndef se utiliza en lenguajes de programación como C y C++ para evitar la inclusión repetida de un archivo de encabezado en un programa. Se utiliza en combinación con #define y #endif para crear \"guardias de inclusión\" que aseguran que un archivo de encabezado solo se incluya una vez en un archivo fuente.","Respuesta intermedia: La directiva #ifndef (que significa \"if not defined\" o \"si no esta definido\") se utiliza en C y C++ para evitar la inclusión repetida de un archivo de encabezado en un programa. Se combina con #define para crear una \"guardia de inclusión\". La idea es que cuando se incluye un archivo de encabezado en un archivo fuente, el preprocesador verifica si una constante o macro específica (normalmente el nombre del archivo de encabezado en mayúsculas) ya esta definida. Si no esta definida, el preprocesador define esta constante y permite la inclusión del archivo de encabezado. Si ya esta definida, el preprocesador omite la inclusión del archivo de encabezado.");
largaDefinicion q15(15,"Que es el type casting?","Respuesta corta: El type casting (o conversión de tipos) es un proceso en programación en el que se cambia explícitamente el tipo de datos de una variable de un tipo a otro. Esto puede ser necesario cuando se quiere realizar una operación con tipos incompatibles o cuando se desea asignar una variable de un tipo a otra de tipo diferente.","Respuesta intermedia: El type casting, tambien conocido como conversión de tipos, es un proceso que permite cambiar explícitamente el tipo de datos de una variable en un lenguaje de programación. Esto puede ser necesario cuando se desea realizar operaciones entre variables de tipos incompatibles o cuando se necesita asignar una variable de un tipo a otra de tipo diferente. Existen dos tipos principales de type casting:\nCasting implícito: En algunas situaciones, el lenguaje de programación realiza automaticamente la conversión de tipos de manera segura y transparente.\nCasting explícito: A veces, es necesario realizar una conversión de tipos de manera explícita utilizando operadores de casting");
largaDefinicion q16(16,"Cual es la diferencia entre un arreglo y una lista en C++?","Respuesta corta: Un arreglo en C++ es una estructura de datos de tamaño fijo que almacena elementos en ubicaciones de memoria contiguas, mientras que una lista (como std::list o std::vector) es una estructura de datos dinamica de tamaño variable que almacena elementos en ubicaciones de memoria no necesariamente contiguas.","Respuesta intermedia: La diferencia clave entre un arreglo y una lista en C++ radica en su tamaño y ubicación de memoria. Un arreglo tiene un tamaño fijo en tiempo de compilación y almacena elementos en ubicaciones de memoria contiguas, lo que permite un acceso rapido y constante a los elementos. En contraste, una lista puede cambiar de tamaño durante la ejecución y almacena elementos en ubicaciones de memoria dispersas, lo que facilita la inserción y eliminación eficiente de elementos, pero puede tener un acceso mas lento a elementos específicos.");
largaDefinicion q17(17,"Que es el puntero this en C++?","Respuesta corta: this en C++ es un puntero implícito que apunta a la instancia actual de un objeto dentro de una función miembro de una clase. Se utiliza para acceder a los miembros de la instancia en el contexto de la función.","Respuesta intermedia: En C++, this es un puntero implícito que se refiere a la instancia actual de un objeto cuando se esta dentro de una función miembro de una clase. Permite acceder y manipular los miembros de la instancia actual en el contexto de la función. this es especialmente útil en situaciones donde el nombre de un parametro o una variable local tiene el mismo nombre que un miembro de la clase, ayudando a distinguir entre la variable local y el miembro de la clase.");
largaDefinicion q18(18,"Que es un objeto y que es instanciar?","Respuesta corta: Un objeto es una instancia concreta de una clase en programación que tiene atributos (datos) y metodos (funciones) asociados. Instanciar es el proceso de crear un objeto a partir de una clase.","Respuesta intermedia: Un objeto es una entidad concreta y autónoma en programación que se crea a partir de una clase. Una clase es una plantilla o un plano que define la estructura y el comportamiento de los objetos que se pueden crear a partir de ella. Un objeto tiene atributos (datos) que representan su estado y metodos (funciones) que definen su comportamiento. Instanciar es el acto de crear un objeto específico a partir de una clase, asignandole un espacio en memoria y permitiendole interactuar con otros objetos y el programa en general. Cada objeto creado a partir de la misma clase se considera una instancia independiente de esa clase, con su propio conjunto de atributos y comportamiento.");
largaDefinicion q19(19,"Que es el constructor y el destructor en una clase?","Respuesta corta:\nEl constructor es un metodo especial en una clase de programación que se llama automaticamente cuando se crea un objeto de esa clase. Se utiliza para inicializar los atributos del objeto.\nEl destructor es un metodo especial que se llama automaticamente cuando un objeto de una clase es destruido, generalmente al salir de su ambito de alcance. Se utiliza para liberar recursos o realizar tareas de limpieza.","Respuesta intermedia:\nConstructor: Es un metodo especial en una clase que se utiliza para inicializar los atributos de un objeto cuando se crea una instancia de esa clase. Puede tener parametros para configurar el estado inicial del objeto y garantiza que el objeto tenga un estado valido desde el principio. El constructor se llama automaticamente cuando se crea un objeto y puede haber múltiples constructores en una clase, cada uno con diferentes parametros.\nDestructor: Es otro metodo especial en una clase que se llama automaticamente cuando un objeto de la clase se destruye, generalmente al salir de su ambito de alcance o cuando se libera explícitamente con delete en C++. El destructor se utiliza para realizar tareas de limpieza, liberar recursos (como memoria dinamica) y garantizar que los recursos se gestionen adecuadamente. Por lo general, solo hay un destructor por clase.");
largaDefinicion q20(20,"Que es la sobrecarga de operadores en C++ y cómo se utiliza?","Respuesta corta: La sobrecarga de operadores en C++ permite definir comportamientos personalizados para operadores como +, -, *, /, entre otros, para tipos de datos personalizados (objetos de clases). Se utiliza mediante funciones miembro o funciones globales que toman uno o mas operandos de la clase personalizada.","Respuesta intermedia: La sobrecarga de operadores en C++ es una característica que permite definir comportamientos personalizados para los operadores del lenguaje, como +, -, *, /, =, etc., para tipos de datos personalizados, es decir, objetos de clases. Esto se logra mediante la definición de funciones miembro o funciones globales que toman uno o mas operandos de la clase personalizada como argumentos y realizan operaciones personalizadas con ellos. Por ejemplo, puedes sobrecargar el operador + para concatenar cadenas de texto o realizar cualquier otro tipo de operación deseada.");
largaDefinicion q21(21,"Que es memoria dinamica?","Respuesta corta: La memoria dinamica es un area de la memoria del sistema que un programa puede solicitar y liberar durante su ejecución. Permite la asignación y desasignación de memoria según sea necesario para almacenar datos y estructuras de manera flexible.","Respuesta intermedia: La memoria dinamica se refiere a un area de la memoria del sistema que un programa de computadora puede solicitar y utilizar durante su ejecución para almacenar datos de manera flexible. A diferencia de la memoria estatica, cuyo tamaño se determina en tiempo de compilación, la memoria dinamica permite la asignación y desasignación de memoria en tiempo de ejecución, lo que significa que puedes solicitar y liberar memoria según sea necesario. Esto es útil cuando no conoces de antemano la cantidad de memoria que necesitaras o cuando deseas gestionar recursos de manera mas eficiente. En muchos lenguajes de programación, como C y C++, la memoria dinamica se gestiona a traves de funciones como malloc, free, new y delete. Sin embargo, es importante tener en cuenta que el uso incorrecto de la memoria dinamica puede llevar a problemas como fugas de memoria o corrupción de datos.");
largaDefinicion q22(22,"Que es memoria estatica?","Respuesta corta: La memoria estatica es una area de la memoria reservada para variables cuyo tamaño y tiempo de vida se determinan en tiempo de compilación. Estas variables existen durante toda la ejecución del programa.","Respuesta intermedia: La memoria estatica se refiere a un area de la memoria de una computadora que se utiliza para almacenar variables cuyo tamaño y tiempo de vida se determinan en tiempo de compilación. Estas variables se crean antes de que el programa comience a ejecutarse y existen durante toda la ejecución del programa. Ejemplos de variables estaticas incluyen variables globales y variables estaticas locales en funciones. Las variables estaticas retienen su valor entre llamadas a la función (en el caso de variables estaticas locales) o durante toda la ejecución del programa (en el caso de variables globales). La memoria estatica es útil para almacenar datos que deben persistir a lo largo de la ejecución del programa y cuyo tamaño es conocido de antemano.");
largaDefinicion q23(23,"Que es una biblioteca dinamica?","Respuesta corta: Una biblioteca dinamica es un archivo compilado que contiene funciones y código reutilizable que puede cargarse y utilizarse en tiempo de ejecución por múltiples programas. Permite ahorrar espacio en disco y memoria RAM al compartir código común entre aplicaciones.","Respuesta intermedia: Una biblioteca dinamica, tambien conocida como DLL (Dynamic Link Library) en Windows o SO (Shared Object) en sistemas Unix/Linux, es un archivo compilado que contiene código y funciones reutilizables. A diferencia de una biblioteca estatica, que se vincula con el programa en tiempo de compilación, una biblioteca dinamica se carga en memoria en tiempo de ejecución por los programas que la necesitan. Esto permite que múltiples programas compartan el mismo código común en memoria, lo que ahorra espacio en disco y memoria RAM. Las bibliotecas dinamicas son utilizadas para extender la funcionalidad de programas, proporcionar funciones compartidas entre aplicaciones y permitir actualizaciones independientes de las aplicaciones que las utilizan.");
largaDefinicion q24(24,"Que es una biblioteca estatica?","Respuesta corta: Una biblioteca estatica es un archivo que contiene código objeto precompilado y funciones que se vinculan con un programa en tiempo de compilación. El código de la biblioteca se incorpora directamente en el ejecutable del programa, lo que lo hace autónomo pero puede aumentar su tamaño.","Respuesta intermedia: Una biblioteca estatica es un archivo que contiene código objeto precompilado y funciones que se vinculan con un programa en tiempo de compilación. Cuando se utiliza una biblioteca estatica, el código de la biblioteca se incorpora directamente en el ejecutable del programa, lo que significa que el programa resultante es autónomo y no depende de archivos externos durante la ejecución. Sin embargo, esto puede aumentar el tamaño del ejecutable y, en consecuencia, consumir mas espacio en disco y memoria RAM. Las bibliotecas estaticas son útiles cuando se desea crear un ejecutable independiente que no requiera la presencia de archivos externos, pero pueden resultar en aplicaciones mas grandes y menos eficientes en terminos de uso de recursos.");
largaDefinicion q25(25,"Que es un systemcall?","Respuesta corta: Una system call (llamada al sistema) es una interfaz que permite a un programa de usuario solicitar servicios o recursos del sistema operativo, como la administración de archivos, la comunicación con dispositivos de hardware o la gestión de procesos.","Respuesta intermedia: Una system call (llamada al sistema) es una interfaz de programación que permite que un programa de usuario interactúe con el kernel o núcleo del sistema operativo para solicitar servicios o recursos que no estan disponibles directamente para el programa de usuario. Las system calls proporcionan una forma segura y controlada de acceder a funcionalidades del sistema operativo, como administración de archivos, comunicación con dispositivos de hardware, gestión de procesos y redes, entre otros. Cuando un programa de usuario necesita realizar una operación que requiere privilegios especiales o acceso a recursos controlados por el sistema operativo, utiliza system calls para solicitar estos servicios. El sistema operativo ejecuta la operación en nombre del programa de usuario y devuelve los resultados apropiados. Ejemplos de system calls incluyen open, read, write, fork, exec, entre otros.");
largaDefinicion q26(26,"Que es un callback?","Respuesta corta: Un callback es una función que se pasa como argumento a otra función y se ejecuta despues de que cierto evento ocurra o cuando se cumple una condición específica.","Respuesta intermedia: Un callback es una función que se pasa como argumento a otra función o se registra en un objeto para que se ejecute en respuesta a un evento o cuando se cumple una condición específica. Los callbacks son comunes en programación asincrónica y en manejo de eventos, donde permiten que un programa continúe su ejecución mientras espera que ocurra algún evento, y luego se llame al callback para manejar ese evento. Por ejemplo, en JavaScript, los callbacks se utilizan en funciones como addEventListener para manejar eventos del usuario, como hacer clic en un botón. Los callbacks son una tecnica poderosa para la programación modular y la gestión de flujos de control en situaciones donde el tiempo de ejecución de una operación es incierto.");
largaDefinicion q27(27,"SPI?","Respuesta corta: SPI (Serial Peripheral Interface) es un protocolo de comunicación serie utilizado para la transferencia de datos entre microcontroladores y dispositivos perifericos, como sensores, pantallas y tarjetas de memoria. Se caracteriza por su alta velocidad y su capacidad de comunicación síncrona.","Respuesta intermedia: SPI (Serial Peripheral Interface) es un protocolo de comunicación ampliamente utilizado en la electrónica para conectar microcontroladores con dispositivos perifericos, como sensores, pantallas, tarjetas de memoria y otros circuitos integrados. SPI se basa en una comunicación síncrona, donde los datos se transmiten en serie a traves de un bus de cuatro líneas: MISO (Master In Slave Out), MOSI (Master Out Slave In), SCLK (Serial Clock), y SS (Slave Select) o CS (Chip Select). El maestro (microcontrolador) inicia la comunicación seleccionando un esclavo específico mediante la señal SS/CS, y luego transmite y recibe datos a traves de las líneas MISO y MOSI, sincronizados por la señal SCLK. SPI es conocido por su alta velocidad de transferencia de datos y su simplicidad, lo que lo hace adecuado para aplicaciones que requieren una rapida interacción entre microcontroladores y dispositivos perifericos. Sin embargo, no define un estandar de comunicación de alto nivel, como los protocolos de aplicación específicos (por ejemplo, SPI puede usarse en conjunto con protocolos como I2C o UART para transmitir datos en formatos específicos).");
largaDefinicion q28(28,"I2C?","Respuesta corta: I2C (Inter-Integrated Circuit) es un protocolo de comunicación de bus serie utilizado para conectar microcontroladores, sensores, pantallas y otros dispositivos en aplicaciones electrónicas. Permite la comunicación bidireccional de datos y utiliza dos líneas, SDA (Serial Data) y SCL (Serial Clock), para la transferencia de información.","Respuesta intermedia: I2C (Inter-Integrated Circuit) es un protocolo de comunicación de bus serie ampliamente utilizado en la electrónica para conectar microcontroladores y una variedad de dispositivos perifericos, como sensores, pantallas, memoria EEPROM y otros circuitos integrados. I2C permite la comunicación bidireccional de datos entre múltiples dispositivos en el mismo bus de dos cables: SDA (Serial Data) y SCL (Serial Clock). Uno o mas dispositivos maestros controlan el bus y pueden comunicarse con múltiples dispositivos esclavos a traves de direcciones únicas asignadas a cada esclavo. Esto facilita la conexión de varios dispositivos en un sistema sin requerir un número excesivo de pines de E/S en el microcontrolador. I2C es conocido por su simplicidad y versatilidad, y se utiliza en una amplia gama de aplicaciones electrónicas.");
largaDefinicion q29(29,"Que es un programa deamon?","Respuesta corta: Un programa daemon es un proceso en segundo plano que se ejecuta en un sistema operativo sin interacción directa con un usuario y realiza tareas específicas, como servicios de servidor, mantenimiento del sistema o automatización de procesos.","Respuesta intermedia: Un programa daemon (tambien escrito como \"daemon\") es un tipo de proceso en un sistema operativo que se ejecuta en segundo plano, sin necesidad de interacción directa con un usuario. Los daemons realizan diversas tareas, como servir solicitudes de red, administrar recursos del sistema, realizar tareas programadas o automatizar procesos. Los daemons son esenciales para el funcionamiento de sistemas operativos y servicios en línea, como servidores web, servidores de correo electrónico y servicios de impresión, ya que funcionan continuamente y responden a eventos o solicitudes específicas sin requerir la intervención del usuario. Su nombre proviene de la mitología griega, donde un daemon era un espíritu que realizaba tareas divinas en segundo plano.");
largaDefinicion q30(30,"Que es un cross-compiler?","Respuesta corta: Un cross-compiler es un compilador que genera código ejecutable para una plataforma o arquitectura de destino diferente a la plataforma en la que se ejecuta el compilador. Se utiliza para desarrollar software que se ejecutara en sistemas embebidos, dispositivos integrados o plataformas remotas.","Respuesta intermedia: Un cross-compiler es una herramienta de desarrollo que permite compilar código fuente en un sistema anfitrión (donde se ejecuta el compilador) y generar código ejecutable para una plataforma de destino diferente. Esto es especialmente útil en el desarrollo de software para sistemas embebidos, dispositivos integrados o plataformas remotas, donde la plataforma de destino puede tener una arquitectura de hardware diferente, un sistema operativo específico o restricciones de recursos. El cross-compiler se encarga de traducir el código fuente en un formato compatible con la plataforma de destino, lo que facilita el desarrollo de software multiplataforma y la portabilidad. Por ejemplo, puedes usar un cross-compiler en una computadora con arquitectura x86 para compilar software que se ejecutara en un microcontrolador ARM.");
largaDefinicion q31(31,"Que es un proceso?","Respuesta corta: Un proceso es un programa en ejecución en un sistema operativo. Cada proceso tiene su espacio de memoria y recursos propios y puede ejecutar tareas específicas de forma independiente.","Respuesta intermedia: Un proceso es una instancia en ejecución de un programa en un sistema operativo. Cada proceso tiene su propio espacio de memoria, recursos asignados y contexto de ejecución, lo que le permite ejecutar tareas de manera independiente de otros procesos. Los procesos pueden comunicarse entre sí y compartir recursos o datos según las políticas y mecanismos del sistema operativo, pero se ejecutan de manera aislada y protegida para garantizar la estabilidad y seguridad del sistema. Los procesos son la unidad basica de ejecución en un sistema operativo y permiten la multitarea y la ejecución concurrente de aplicaciones en una computadora.");
largaDefinicion q32(32,"Que es un thread?","Respuesta corta: Un thread (hilo) es la unidad mas pequeña de ejecución dentro de un proceso en un sistema operativo. Los threads comparten el mismo espacio de memoria y recursos del proceso padre y pueden ejecutar tareas de forma concurrente.","Respuesta intermedia: Un thread, tambien conocido como hilo, es una unidad de ejecución dentro de un proceso en un sistema operativo. A diferencia de los procesos, los threads comparten el mismo espacio de memoria y recursos del proceso padre, lo que les permite ejecutar tareas de forma concurrente y cooperativa. Los threads pueden ser utilizados para descomponer una aplicación en tareas mas pequeñas que se ejecutan simultaneamente, lo que puede mejorar la eficiencia y la capacidad de respuesta de un programa. Los sistemas operativos modernos admiten múltiples threads en un proceso, lo que facilita la programación paralela y la multitarea dentro de una aplicación. Sin embargo, es importante gestionar los threads cuidadosamente para evitar problemas como las condiciones de carrera y las inconsistencias de datos.");






vector <largaDefinicion> set1 = {q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17,q18,q19,q20,q21,q22,q23,q24,q25,q26,q27,q28,q29,q30,q31,q32};


int main() {

    menu(0, set1 ,false);
     
    return 0;

}

